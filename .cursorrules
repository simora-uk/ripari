<project_info	>
Name: Ripari (ripari_cli, ripari, @simora-uk/ripari)

A modular, extensible command-line interface designed to streamline and manage Markdown formatting and linting tasks. The application achieves this by providing individual commands encapsulated in a flexible architecture, making it easy to add new functionality or modify existing commands.

The output for this tool must work on both command-line and via a Visual Studio Code Extension.
</project_info>

<rust_conventions>
1. Follow Rust's `rustfmt` rules, managed in `rustfmt.toml`.
2. in `.rs` files you MUST semi-colons to end lines.
3. echo feature must have a test that covers the happy path, the error path, edge cases and parameter variations.
4. echo test must focus on 1 capability, and test that capability.
5. rely on proven, stable methodologies.
6. do not suggest or implement experimental or cutting-edge solutions.
</rust_conventions>

<code_file_length>
- Keep code files under 250 lines.
- If a code file exceeds 250 lines, split it into smaller files following these rules:
  1. Group code by cohesive functionality or responsibility (e.g., one class, module, or distinct feature per file).
  2. Maintain clear separation of concerns, ensuring related functions or logic remain together.
  3. Avoid introducing unnecessary dependencies between split files.
  4. Prioritise readability and natural logical boundaries over strictly adhering to the line limit
  5. Preserve consistency with existing architectural patterns or module structures in the project.
</code_file_length>

<cli_specification>
For CLI usage specification see "docs/cli_usage.md".

1. Command Modularity:
- Place command logic in `src/commands/<command>.rs`.
- Export commands in `src/commands/mod.rs`.
- Use individual modules (e.g., `format.rs`, `lint.rs`) for each command
  - Independent logic handling.
  - Clear separation of concerns.
  - Future extensibility (e.g., adding a `test` or `validate` command).
- Arguments and flags are parsed and dispatched via the `commands/mod.rs` dispatcher.
- Each command supports additional flags (e.g., `--write` for formatting).
- Testing:
  - Use unit tests within the respective modules.
- Error Messaging:
  - Centralise errors using `diagnostics.rs`.
<examples>
Examples:
   - Replace Smart Punctuation: Convert smart quotes and dashes to standard equivalents.
   - Clean Up Headings: Remove bold or italic styling from headings.
   - Replace Dashes with Hyphens: Ensure uniform use of hyphens across Markdown files.
</examples>
</cli_specification>

<technology>
- Language: Rust
- Build System: Cargo
- Libraries: Standard Rust crates
- GitHub Actions: CI/CD
</technology>

<build_run>
- Build: `just release`
- Install locally: `just install`
- Pre Release: `just ready`
- Run: `./target/release/ripari <command>`
</build_run>
